{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/SESI%20SENAI%202/Documents/2025/React/projetoreact/src/app/api/gerar-questionario/route.ts"],"sourcesContent":["// src/app/api/gerar-questionario/route.ts\r\nimport { GoogleGenerativeAI } from '@google/generative-ai';\r\nimport { NextResponse } from 'next/server';\r\n\r\ninterface RequestBody {\r\n    assunto: string;\r\n}\r\n\r\nexport async function POST(request: Request) {\r\n    try {\r\n        const apiKey = process.env.GEMINI_API_KEY;\r\n        if (!apiKey) {\r\n            return NextResponse.json({ error: \"Chave da API do Gemini não configurada no servidor.\" }, { status: 500 });\r\n        }\r\n\r\n        const genAI = new GoogleGenerativeAI(apiKey);\r\n        const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\r\n\r\n        const { assunto }: RequestBody = await request.json();\r\n\r\n        console.log(\"Recebido assunto na API Route:\", assunto);\r\n\r\n        if (!assunto) {\r\n            return NextResponse.json({ error: \"Assunto do livro não fornecido para gerar o questionário.\" }, { status: 400 });\r\n        }\r\n\r\n        const prompt = `Gere 10 questões de múltipla escolha **exclusivamente sobre o conteúdo, personagens, enredo ou temas do livro \"${assunto}\"**. Cada questão deve ter 4 alternativas (A, B, C, D) e apenas uma resposta correta.\r\n\r\n        O formato de saída deve ser um array JSON de objetos, onde cada objeto representa uma questão e contém:\r\n        - \"id\": um número único para a questão (começando de 1).\r\n        - \"pergunta\": a frase da pergunta.\r\n        - \"alternativas\": um array de 4 objetos, cada um com \"texto\" (a alternativa) e \"correta\" (booleano true/false).\r\n\r\n        Assegure que o array tenha exatamente 10 questões.\r\n        Assegure que o campo \"id\" seja um número, não uma string.\r\n        Assegure que o campo \"correta\" seja um booleano (true ou false).\r\n        Certifique-se de que a resposta seja APENAS o JSON, sem nenhum texto explicativo, marcadores de código Markdown (ex: \\`\\`\\`json), ou qualquer outra coisa antes ou depois.\r\n        `;\r\n\r\n        console.log(\"Prompt enviado ao Gemini:\", prompt);\r\n\r\n        const result = await model.generateContent(prompt);\r\n        const response = result.response;\r\n        let text = response.text();\r\n\r\n        console.log(\"Resposta bruta do Gemini:\", text);\r\n\r\n        // --- INÍCIO DA LÓGICA DE LIMPEZA MAIS ROBUSTA ---\r\n        // Primeiro, remove a abertura do bloco de código\r\n        if (text.startsWith('```json')) {\r\n            text = text.substring('```json'.length);\r\n        }\r\n        // Segundo, remove o fechamento do bloco de código, se presente, no final\r\n        if (text.endsWith('```')) {\r\n            text = text.substring(0, text.length - '```'.length);\r\n        }\r\n        // Terceiro, remove quaisquer espaços em branco (incluindo quebras de linha) do início e do fim\r\n        text = text.trim();\r\n        // --- FIM DA LÓGICA DE LIMPEZA MAIS ROBUSTA ---\r\n\r\n\r\n        let questoesGeradas;\r\n        try {\r\n            questoesGeradas = JSON.parse(text);\r\n            console.log(\"JSON parseado:\", questoesGeradas);\r\n        } catch (jsonError: any) {\r\n            console.error(\"Erro ao parsear JSON do Gemini:\", jsonError);\r\n            console.error(\"Texto bruto recebido do Gemini (falha no parse):\", text);\r\n            return NextResponse.json({ error: \"Erro ao processar a resposta do Gemini. Formato JSON inválido.\" }, { status: 500 });\r\n        }\r\n\r\n        if (!Array.isArray(questoesGeradas) || questoesGeradas.length === 0 || !questoesGeradas[0].pergunta || !Array.isArray(questoesGeradas[0].alternativas)) {\r\n            console.error(\"Resposta do Gemini não está no formato esperado:\", questoesGeradas);\r\n            return NextResponse.json({ error: \"A API do Gemini não gerou questões no formato esperado. Tente novamente ou ajuste o prompt.\" }, { status: 500 });\r\n        }\r\n\r\n        const questoesFinal = questoesGeradas.slice(0, 10);\r\n        return NextResponse.json(questoesFinal, { status: 200 });\r\n\r\n    } catch (error: any) {\r\n        console.error(\"Erro na API de geração de questionário:\", error);\r\n        let errorMessage = \"Ocorreu um erro inesperado ao gerar o questionário.\";\r\n        if (error.message.includes(\"429\")) {\r\n            errorMessage = \"Limite de requisições excedido para a API do Gemini. Tente novamente mais tarde.\";\r\n        } else if (error.message.includes(\"403\") || error.message.includes(\"API key not valid\")) {\r\n            errorMessage = \"Autenticação falhou com a API do Gemini. Verifique sua chave de API e se ela tem permissões.\";\r\n        } else if (error.message.includes(\"quota\")) {\r\n            errorMessage = \"Quota excedida para a API do Gemini. Por favor, verifique seu limite de uso ou tente novamente em um tempo.\";\r\n        }\r\n        return NextResponse.json({ error: errorMessage, details: error.message }, { status: 500 });\r\n    }\r\n}"],"names":[],"mappings":"AAAA,0CAA0C;;;;AAC1C;AACA;;;AAMO,eAAe,KAAK,OAAgB;IACvC,IAAI;QACA,MAAM,SAAS,QAAQ,GAAG,CAAC,cAAc;QACzC,IAAI,CAAC,QAAQ;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsD,GAAG;gBAAE,QAAQ;YAAI;QAC7G;QAEA,MAAM,QAAQ,IAAI,gKAAA,CAAA,qBAAkB,CAAC;QACrC,MAAM,QAAQ,MAAM,kBAAkB,CAAC;YAAE,OAAO;QAAmB;QAEnE,MAAM,EAAE,OAAO,EAAE,GAAgB,MAAM,QAAQ,IAAI;QAEnD,QAAQ,GAAG,CAAC,kCAAkC;QAE9C,IAAI,CAAC,SAAS;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA4D,GAAG;gBAAE,QAAQ;YAAI;QACnH;QAEA,MAAM,SAAS,CAAC,+GAA+G,EAAE,QAAQ;;;;;;;;;;;QAWzI,CAAC;QAED,QAAQ,GAAG,CAAC,6BAA6B;QAEzC,MAAM,SAAS,MAAM,MAAM,eAAe,CAAC;QAC3C,MAAM,WAAW,OAAO,QAAQ;QAChC,IAAI,OAAO,SAAS,IAAI;QAExB,QAAQ,GAAG,CAAC,6BAA6B;QAEzC,mDAAmD;QACnD,iDAAiD;QACjD,IAAI,KAAK,UAAU,CAAC,YAAY;YAC5B,OAAO,KAAK,SAAS,CAAC,UAAU,MAAM;QAC1C;QACA,yEAAyE;QACzE,IAAI,KAAK,QAAQ,CAAC,QAAQ;YACtB,OAAO,KAAK,SAAS,CAAC,GAAG,KAAK,MAAM,GAAG,MAAM,MAAM;QACvD;QACA,+FAA+F;QAC/F,OAAO,KAAK,IAAI;QAChB,gDAAgD;QAGhD,IAAI;QACJ,IAAI;YACA,kBAAkB,KAAK,KAAK,CAAC;YAC7B,QAAQ,GAAG,CAAC,kBAAkB;QAClC,EAAE,OAAO,WAAgB;YACrB,QAAQ,KAAK,CAAC,mCAAmC;YACjD,QAAQ,KAAK,CAAC,oDAAoD;YAClE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiE,GAAG;gBAAE,QAAQ;YAAI;QACxH;QAEA,IAAI,CAAC,MAAM,OAAO,CAAC,oBAAoB,gBAAgB,MAAM,KAAK,KAAK,CAAC,eAAe,CAAC,EAAE,CAAC,QAAQ,IAAI,CAAC,MAAM,OAAO,CAAC,eAAe,CAAC,EAAE,CAAC,YAAY,GAAG;YACpJ,QAAQ,KAAK,CAAC,oDAAoD;YAClE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA8F,GAAG;gBAAE,QAAQ;YAAI;QACrJ;QAEA,MAAM,gBAAgB,gBAAgB,KAAK,CAAC,GAAG;QAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,eAAe;YAAE,QAAQ;QAAI;IAE1D,EAAE,OAAO,OAAY;QACjB,QAAQ,KAAK,CAAC,2CAA2C;QACzD,IAAI,eAAe;QACnB,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,QAAQ;YAC/B,eAAe;QACnB,OAAO,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,UAAU,MAAM,OAAO,CAAC,QAAQ,CAAC,sBAAsB;YACrF,eAAe;QACnB,OAAO,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,UAAU;YACxC,eAAe;QACnB;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;YAAc,SAAS,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IAC5F;AACJ","debugId":null}}]
}